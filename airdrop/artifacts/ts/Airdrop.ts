/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as AirdropContractJson } from "../Airdrop.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace AirdropTypes {
  export type Fields = {
    selfOwner: Address;
  };

  export type State = ContractState<Fields>;
}

class Factory extends ContractFactory<AirdropInstance, AirdropTypes.Fields> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as AirdropTypes.Fields;
  }

  consts = { OwnedError: { Forbidden: BigInt(90) } };

  at(address: string): AirdropInstance {
    return new AirdropInstance(address);
  }

  tests = {
    assertOwner: async (
      params: TestContractParams<AirdropTypes.Fields, { caller: Address }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "assertOwner", params);
    },
    setOwner: async (
      params: TestContractParams<AirdropTypes.Fields, { newOwner: Address }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setOwner", params);
    },
    deposit: async (
      params: TestContractParams<
        AirdropTypes.Fields,
        { tokenId: HexString; amount: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "deposit", params);
    },
    disperse10: async (
      params: TestContractParams<
        AirdropTypes.Fields,
        {
          tokenId: HexString;
          amountPerAddress: bigint;
          addresses: [
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address
          ];
        }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "disperse10", params);
    },
    disperse25: async (
      params: TestContractParams<
        AirdropTypes.Fields,
        {
          tokenId: HexString;
          amountPerAddress: bigint;
          addresses: [
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address
          ];
        }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "disperse25", params);
    },
    disperse50: async (
      params: TestContractParams<
        AirdropTypes.Fields,
        {
          tokenId: HexString;
          amountPerAddress: bigint;
          addresses: [
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address
          ];
        }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "disperse50", params);
    },
    disperse100: async (
      params: TestContractParams<
        AirdropTypes.Fields,
        {
          tokenId: HexString;
          amountPerAddress: bigint;
          addresses: [
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address
          ];
        }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "disperse100", params);
    },
    disperse150: async (
      params: TestContractParams<
        AirdropTypes.Fields,
        {
          tokenId: HexString;
          amountPerAddress: bigint;
          addresses: [
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address,
            Address
          ];
        }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "disperse150", params);
    },
  };
}

// Use this object to test and deploy the contract
export const Airdrop = new Factory(
  Contract.fromJson(
    AirdropContractJson,
    "",
    "7c47d4d5490e0ab6c8804d7a6945afd12231a31fa1e0264522d35a406da714a5"
  )
);

// Use this class to interact with the blockchain
export class AirdropInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<AirdropTypes.State> {
    return fetchContractState(Airdrop, this);
  }
}
