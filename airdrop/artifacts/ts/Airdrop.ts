/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as AirdropContractJson } from "../Airdrop.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace AirdropTypes {
  export type State = Omit<ContractState<any>, "fields">;
}

class Factory extends ContractFactory<AirdropInstance, {}> {
  at(address: string): AirdropInstance {
    return new AirdropInstance(address);
  }

  tests = {
    disperse10: async (
      params: Omit<
        TestContractParams<
          never,
          {
            tokenId: HexString;
            amountPerAddress: bigint;
            addresses: [
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address
            ];
          }
        >,
        "initialFields"
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "disperse10", params);
    },
    disperse25: async (
      params: Omit<
        TestContractParams<
          never,
          {
            tokenId: HexString;
            amountPerAddress: bigint;
            addresses: [
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address
            ];
          }
        >,
        "initialFields"
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "disperse25", params);
    },
    disperse50: async (
      params: Omit<
        TestContractParams<
          never,
          {
            tokenId: HexString;
            amountPerAddress: bigint;
            addresses: [
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address
            ];
          }
        >,
        "initialFields"
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "disperse50", params);
    },
    disperse100: async (
      params: Omit<
        TestContractParams<
          never,
          {
            tokenId: HexString;
            amountPerAddress: bigint;
            addresses: [
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address,
              Address
            ];
          }
        >,
        "initialFields"
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "disperse100", params);
    },
  };
}

// Use this object to test and deploy the contract
export const Airdrop = new Factory(
  Contract.fromJson(
    AirdropContractJson,
    "",
    "ebb2cca54fd435d972fb3bc228ef10841f6ab65497985e7592c9794975898401"
  )
);

// Use this class to interact with the blockchain
export class AirdropInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<AirdropTypes.State> {
    return fetchContractState(Airdrop, this);
  }
}
