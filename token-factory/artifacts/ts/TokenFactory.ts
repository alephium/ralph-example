/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as TokenFactoryContractJson } from "../TokenFactory.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";

// Custom types for the contract
export namespace TokenFactoryTypes {
  export type Fields = {
    tokenTemplate: HexString;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    createToken: {
      params: CallContractParams<{
        symbol: HexString;
        name: HexString;
        decimals: bigint;
        totalSupply: bigint;
      }>;
      result: CallContractResult<HexString>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    createToken: {
      params: SignExecuteContractMethodParams<{
        symbol: HexString;
        name: HexString;
        decimals: bigint;
        totalSupply: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  TokenFactoryInstance,
  TokenFactoryTypes.Fields
> {
  encodeFields(fields: TokenFactoryTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  at(address: string): TokenFactoryInstance {
    return new TokenFactoryInstance(address);
  }

  tests = {
    createToken: async (
      params: TestContractParamsWithoutMaps<
        TokenFactoryTypes.Fields,
        {
          symbol: HexString;
          name: HexString;
          decimals: bigint;
          totalSupply: bigint;
        }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "createToken", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: TokenFactoryTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const TokenFactory = new Factory(
  Contract.fromJson(
    TokenFactoryContractJson,
    "=6-2+69=11-1+f=114+16087e0240204372656174656420746f6b656e20636f6e747261637420776974682049443a2000=6",
    "dc5e2968a9cbada3c13e298932547a0e1a84766db741b66f3178b6adb39c7702",
    []
  )
);
registerContract(TokenFactory);

// Use this class to interact with the blockchain
export class TokenFactoryInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<TokenFactoryTypes.State> {
    return fetchContractState(TokenFactory, this);
  }

  view = {
    createToken: async (
      params: TokenFactoryTypes.CallMethodParams<"createToken">
    ): Promise<TokenFactoryTypes.CallMethodResult<"createToken">> => {
      return callMethod(
        TokenFactory,
        this,
        "createToken",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    createToken: async (
      params: TokenFactoryTypes.SignExecuteMethodParams<"createToken">
    ): Promise<TokenFactoryTypes.SignExecuteMethodResult<"createToken">> => {
      return signExecuteMethod(TokenFactory, this, "createToken", params);
    },
  };

  async multicall<Calls extends TokenFactoryTypes.MultiCallParams>(
    calls: Calls
  ): Promise<TokenFactoryTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends TokenFactoryTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<TokenFactoryTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | TokenFactoryTypes.MultiCallParams
      | TokenFactoryTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      TokenFactory,
      this,
      callss,
      getContractByCodeHash
    );
  }
}
