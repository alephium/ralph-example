/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as AuctionContractJson } from "../Auction.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";

// Custom types for the contract
export namespace AuctionTypes {
  export type Fields = {
    bidderTemplateId: HexString;
    auctioneer: Address;
    beneficiaryAsset: HexString;
    beneficiaryAssetAmount: bigint;
    auctionEndTime: bigint;
    highestBidder: Address;
    highestBid: bigint;
    ended: boolean;
  };

  export type State = ContractState<Fields>;

  export type HighestBidIncreasedEvent = ContractEvent<{
    bidder: Address;
    amount: bigint;
  }>;
  export type AuctionEndedEvent = ContractEvent<{
    winner: Address;
    amount: bigint;
  }>;

  export interface CallMethodTable {
    getAuctioneer: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    bid: {
      params: CallContractParams<{ from: Address; amount: bigint }>;
      result: CallContractResult<null>;
    };
    getBidder: {
      params: CallContractParams<{ address: Address }>;
      result: CallContractResult<HexString>;
    };
    withdraw: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    auctionEnd: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    getAuctioneer: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    bid: {
      params: SignExecuteContractMethodParams<{
        from: Address;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    getBidder: {
      params: SignExecuteContractMethodParams<{ address: Address }>;
      result: SignExecuteScriptTxResult;
    };
    withdraw: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    auctionEnd: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<AuctionInstance, AuctionTypes.Fields> {
  encodeFields(fields: AuctionTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  eventIndex = { HighestBidIncreased: 0, AuctionEnded: 1 };
  consts = {
    ErrorCodes: {
      InvalidArg: BigInt("0"),
      AuctionAlreadyEnded: BigInt("1"),
      BidNotHighEnough: BigInt("2"),
      InvalidBidderAddress: BigInt("3"),
      BidderNotExists: BigInt("4"),
      HighestBidderNotAllowedToWithdraw: BigInt("5"),
      AuctionNotYetEnded: BigInt("6"),
      AuctionEndAlreadyCalled: BigInt("7"),
      InvalidCaller: BigInt("8"),
    },
  };

  at(address: string): AuctionInstance {
    return new AuctionInstance(address);
  }

  tests = {
    getAuctioneer: async (
      params: Omit<
        TestContractParamsWithoutMaps<AuctionTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<Address>> => {
      return testMethod(this, "getAuctioneer", params, getContractByCodeHash);
    },
    bid: async (
      params: TestContractParamsWithoutMaps<
        AuctionTypes.Fields,
        { from: Address; amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "bid", params, getContractByCodeHash);
    },
    getBidder: async (
      params: TestContractParamsWithoutMaps<
        AuctionTypes.Fields,
        { address: Address }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getBidder", params, getContractByCodeHash);
    },
    withdraw: async (
      params: Omit<
        TestContractParamsWithoutMaps<AuctionTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "withdraw", params, getContractByCodeHash);
    },
    auctionEnd: async (
      params: Omit<
        TestContractParamsWithoutMaps<AuctionTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "auctionEnd", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: AuctionTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const Auction = new Factory(
  Contract.fromJson(
    AuctionContractJson,
    "",
    "9435c062906c84ebc32204488a0d51e0c45ca6b447aceebfc23bf5f40101c1a0",
    []
  )
);
registerContract(Auction);

// Use this class to interact with the blockchain
export class AuctionInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<AuctionTypes.State> {
    return fetchContractState(Auction, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeHighestBidIncreasedEvent(
    options: EventSubscribeOptions<AuctionTypes.HighestBidIncreasedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Auction.contract,
      this,
      options,
      "HighestBidIncreased",
      fromCount
    );
  }

  subscribeAuctionEndedEvent(
    options: EventSubscribeOptions<AuctionTypes.AuctionEndedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Auction.contract,
      this,
      options,
      "AuctionEnded",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      AuctionTypes.HighestBidIncreasedEvent | AuctionTypes.AuctionEndedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(Auction.contract, this, options, fromCount);
  }

  view = {
    getAuctioneer: async (
      params?: AuctionTypes.CallMethodParams<"getAuctioneer">
    ): Promise<AuctionTypes.CallMethodResult<"getAuctioneer">> => {
      return callMethod(
        Auction,
        this,
        "getAuctioneer",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    bid: async (
      params: AuctionTypes.CallMethodParams<"bid">
    ): Promise<AuctionTypes.CallMethodResult<"bid">> => {
      return callMethod(Auction, this, "bid", params, getContractByCodeHash);
    },
    getBidder: async (
      params: AuctionTypes.CallMethodParams<"getBidder">
    ): Promise<AuctionTypes.CallMethodResult<"getBidder">> => {
      return callMethod(
        Auction,
        this,
        "getBidder",
        params,
        getContractByCodeHash
      );
    },
    withdraw: async (
      params?: AuctionTypes.CallMethodParams<"withdraw">
    ): Promise<AuctionTypes.CallMethodResult<"withdraw">> => {
      return callMethod(
        Auction,
        this,
        "withdraw",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    auctionEnd: async (
      params?: AuctionTypes.CallMethodParams<"auctionEnd">
    ): Promise<AuctionTypes.CallMethodResult<"auctionEnd">> => {
      return callMethod(
        Auction,
        this,
        "auctionEnd",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    getAuctioneer: async (
      params: AuctionTypes.SignExecuteMethodParams<"getAuctioneer">
    ): Promise<AuctionTypes.SignExecuteMethodResult<"getAuctioneer">> => {
      return signExecuteMethod(Auction, this, "getAuctioneer", params);
    },
    bid: async (
      params: AuctionTypes.SignExecuteMethodParams<"bid">
    ): Promise<AuctionTypes.SignExecuteMethodResult<"bid">> => {
      return signExecuteMethod(Auction, this, "bid", params);
    },
    getBidder: async (
      params: AuctionTypes.SignExecuteMethodParams<"getBidder">
    ): Promise<AuctionTypes.SignExecuteMethodResult<"getBidder">> => {
      return signExecuteMethod(Auction, this, "getBidder", params);
    },
    withdraw: async (
      params: AuctionTypes.SignExecuteMethodParams<"withdraw">
    ): Promise<AuctionTypes.SignExecuteMethodResult<"withdraw">> => {
      return signExecuteMethod(Auction, this, "withdraw", params);
    },
    auctionEnd: async (
      params: AuctionTypes.SignExecuteMethodParams<"auctionEnd">
    ): Promise<AuctionTypes.SignExecuteMethodResult<"auctionEnd">> => {
      return signExecuteMethod(Auction, this, "auctionEnd", params);
    },
  };

  async multicall<Calls extends AuctionTypes.MultiCallParams>(
    calls: Calls
  ): Promise<AuctionTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends AuctionTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<AuctionTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends AuctionTypes.MultiCallParams | AuctionTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(Auction, this, callss, getContractByCodeHash);
  }
}
