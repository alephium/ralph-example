/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as OwnerControlContractJson } from "../OwnerControl.ral.json";
import { getContractByCodeHash } from "./contracts";

import { RalphMap } from "@alephium/web3";

// Custom types for the contract
export namespace OwnerControlTypes {
  export type Fields = {
    owner: Address;
    proposedOwner: Address;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    owner: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    transferOwnership: {
      params: CallContractParams<{ new_owner: Address }>;
      result: CallContractResult<null>;
    };
    proposeNewOwner: {
      params: CallContractParams<{ proposed_owner: Address }>;
      result: CallContractResult<null>;
    };
    acceptOwnership: {
      params: CallContractParams<{ res: boolean }>;
      result: CallContractResult<null>;
    };
    renounceOwnership: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    hasRole: {
      params: CallContractParams<{ address: Address; role: HexString }>;
      result: CallContractResult<boolean>;
    };
    getRoleAdmin: {
      params: CallContractParams<{ role: HexString }>;
      result: CallContractResult<HexString>;
    };
    grantRole: {
      params: CallContractParams<{ address: Address; role: HexString }>;
      result: CallContractResult<null>;
    };
    revokeRole: {
      params: CallContractParams<{ address: Address; role: HexString }>;
      result: CallContractResult<null>;
    };
    createRole: {
      params: CallContractParams<{ role: HexString }>;
      result: CallContractResult<null>;
    };
    onlyOwner: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    onlyRole: {
      params: CallContractParams<{ role: HexString }>;
      result: CallContractResult<null>;
    };
    queueOperation: {
      params: CallContractParams<{ delay: bigint }>;
      result: CallContractResult<boolean>;
    };
    cancelOperation: {
      params: CallContractParams<{ id: bigint }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    owner: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    transferOwnership: {
      params: SignExecuteContractMethodParams<{ new_owner: Address }>;
      result: SignExecuteScriptTxResult;
    };
    proposeNewOwner: {
      params: SignExecuteContractMethodParams<{ proposed_owner: Address }>;
      result: SignExecuteScriptTxResult;
    };
    acceptOwnership: {
      params: SignExecuteContractMethodParams<{ res: boolean }>;
      result: SignExecuteScriptTxResult;
    };
    renounceOwnership: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    hasRole: {
      params: SignExecuteContractMethodParams<{
        address: Address;
        role: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    getRoleAdmin: {
      params: SignExecuteContractMethodParams<{ role: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    grantRole: {
      params: SignExecuteContractMethodParams<{
        address: Address;
        role: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    revokeRole: {
      params: SignExecuteContractMethodParams<{
        address: Address;
        role: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    createRole: {
      params: SignExecuteContractMethodParams<{ role: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    onlyOwner: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    onlyRole: {
      params: SignExecuteContractMethodParams<{ role: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    queueOperation: {
      params: SignExecuteContractMethodParams<{ delay: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    cancelOperation: {
      params: SignExecuteContractMethodParams<{ id: bigint }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];

  export type Maps = {
    rolesMapping?: Map<Address, HexString>;
    roleAdminsMapping?: Map<HexString, HexString>;
    timestamps?: Map<bigint, bigint>;
  };
}

class Factory extends ContractFactory<
  OwnerControlInstance,
  OwnerControlTypes.Fields
> {
  encodeFields(fields: OwnerControlTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  at(address: string): OwnerControlInstance {
    return new OwnerControlInstance(address);
  }

  tests = {
    owner: async (
      params: Omit<
        TestContractParams<
          OwnerControlTypes.Fields,
          never,
          OwnerControlTypes.Maps
        >,
        "testArgs"
      >
    ): Promise<TestContractResult<Address, OwnerControlTypes.Maps>> => {
      return testMethod(this, "owner", params, getContractByCodeHash);
    },
    transferOwnership: async (
      params: TestContractParams<
        OwnerControlTypes.Fields,
        { new_owner: Address },
        OwnerControlTypes.Maps
      >
    ): Promise<TestContractResult<null, OwnerControlTypes.Maps>> => {
      return testMethod(
        this,
        "transferOwnership",
        params,
        getContractByCodeHash
      );
    },
    proposeNewOwner: async (
      params: TestContractParams<
        OwnerControlTypes.Fields,
        { proposed_owner: Address },
        OwnerControlTypes.Maps
      >
    ): Promise<TestContractResult<null, OwnerControlTypes.Maps>> => {
      return testMethod(this, "proposeNewOwner", params, getContractByCodeHash);
    },
    acceptOwnership: async (
      params: TestContractParams<
        OwnerControlTypes.Fields,
        { res: boolean },
        OwnerControlTypes.Maps
      >
    ): Promise<TestContractResult<null, OwnerControlTypes.Maps>> => {
      return testMethod(this, "acceptOwnership", params, getContractByCodeHash);
    },
    renounceOwnership: async (
      params: Omit<
        TestContractParams<
          OwnerControlTypes.Fields,
          never,
          OwnerControlTypes.Maps
        >,
        "testArgs"
      >
    ): Promise<TestContractResult<null, OwnerControlTypes.Maps>> => {
      return testMethod(
        this,
        "renounceOwnership",
        params,
        getContractByCodeHash
      );
    },
    hasRole: async (
      params: TestContractParams<
        OwnerControlTypes.Fields,
        { address: Address; role: HexString },
        OwnerControlTypes.Maps
      >
    ): Promise<TestContractResult<boolean, OwnerControlTypes.Maps>> => {
      return testMethod(this, "hasRole", params, getContractByCodeHash);
    },
    getRoleAdmin: async (
      params: TestContractParams<
        OwnerControlTypes.Fields,
        { role: HexString },
        OwnerControlTypes.Maps
      >
    ): Promise<TestContractResult<HexString, OwnerControlTypes.Maps>> => {
      return testMethod(this, "getRoleAdmin", params, getContractByCodeHash);
    },
    grantRole: async (
      params: TestContractParams<
        OwnerControlTypes.Fields,
        { address: Address; role: HexString },
        OwnerControlTypes.Maps
      >
    ): Promise<TestContractResult<null, OwnerControlTypes.Maps>> => {
      return testMethod(this, "grantRole", params, getContractByCodeHash);
    },
    revokeRole: async (
      params: TestContractParams<
        OwnerControlTypes.Fields,
        { address: Address; role: HexString },
        OwnerControlTypes.Maps
      >
    ): Promise<TestContractResult<null, OwnerControlTypes.Maps>> => {
      return testMethod(this, "revokeRole", params, getContractByCodeHash);
    },
    createRole: async (
      params: TestContractParams<
        OwnerControlTypes.Fields,
        { role: HexString },
        OwnerControlTypes.Maps
      >
    ): Promise<TestContractResult<null, OwnerControlTypes.Maps>> => {
      return testMethod(this, "createRole", params, getContractByCodeHash);
    },
    onlyOwner: async (
      params: Omit<
        TestContractParams<
          OwnerControlTypes.Fields,
          never,
          OwnerControlTypes.Maps
        >,
        "testArgs"
      >
    ): Promise<TestContractResult<null, OwnerControlTypes.Maps>> => {
      return testMethod(this, "onlyOwner", params, getContractByCodeHash);
    },
    onlyRole: async (
      params: TestContractParams<
        OwnerControlTypes.Fields,
        { role: HexString },
        OwnerControlTypes.Maps
      >
    ): Promise<TestContractResult<null, OwnerControlTypes.Maps>> => {
      return testMethod(this, "onlyRole", params, getContractByCodeHash);
    },
    queueOperation: async (
      params: TestContractParams<
        OwnerControlTypes.Fields,
        { delay: bigint },
        OwnerControlTypes.Maps
      >
    ): Promise<TestContractResult<boolean, OwnerControlTypes.Maps>> => {
      return testMethod(this, "queueOperation", params, getContractByCodeHash);
    },
    cancelOperation: async (
      params: TestContractParams<
        OwnerControlTypes.Fields,
        { id: bigint },
        OwnerControlTypes.Maps
      >
    ): Promise<TestContractResult<null, OwnerControlTypes.Maps>> => {
      return testMethod(this, "cancelOperation", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: OwnerControlTypes.Fields,
    asset?: Asset,
    address?: string,
    maps?: OwnerControlTypes.Maps
  ) {
    return this.stateForTest_(initFields, asset, address, maps);
  }
}

// Use this object to test and deploy the contract
export const OwnerControl = new Factory(
  Contract.fromJson(
    OwnerControlContractJson,
    "=8-6+89=2-1+9=2-3+123=2-2+6a=2-2+8f=2-1+b=3-1+3742b=2-3+33f4350=1-2+3=1+5=1-3+3de=1-3=1-1=1-1+8=38+402=1-1=78+7a7e0214696e73657274206174206d617020706174683a2000=48+7a7e021472656d6f7665206174206d617020706174683a2000=61-1+6=29-1+c=40+7a7e021472656d6f7665206174206d617020706174683a2000=60+7a7e0214696e73657274206174206d617020706174683a2000=33-1+5=62+7a7e021472656d6f7665206174206d617020706174683a2000=171-1+e=194+7a7e0214696e73657274206174206d617020706174683a2000=25-1+d=194+7a7e021472656d6f7665206174206d617020706174683a2000=19-1+e=188+7a7e0214696e73657274206174206d617020706174683a2000=133-1+5=54+7a7e0214696e73657274206174206d617020706174683a2000=103-1+c=48+7a7e021472656d6f7665206174206d617020706174683a2000=6",
    "dec4cf8d15bf0e9831b7468df2e5b8e9d60b12d1923117b1b1bc7e3d5c72210c",
    []
  )
);

// Use this class to interact with the blockchain
export class OwnerControlInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  maps = {
    rolesMapping: new RalphMap<Address, HexString>(
      OwnerControl.contract,
      this.contractId,
      "rolesMapping"
    ),
    roleAdminsMapping: new RalphMap<HexString, HexString>(
      OwnerControl.contract,
      this.contractId,
      "roleAdminsMapping"
    ),
    timestamps: new RalphMap<bigint, bigint>(
      OwnerControl.contract,
      this.contractId,
      "timestamps"
    ),
  };

  async fetchState(): Promise<OwnerControlTypes.State> {
    return fetchContractState(OwnerControl, this);
  }

  view = {
    owner: async (
      params?: OwnerControlTypes.CallMethodParams<"owner">
    ): Promise<OwnerControlTypes.CallMethodResult<"owner">> => {
      return callMethod(
        OwnerControl,
        this,
        "owner",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    transferOwnership: async (
      params: OwnerControlTypes.CallMethodParams<"transferOwnership">
    ): Promise<OwnerControlTypes.CallMethodResult<"transferOwnership">> => {
      return callMethod(
        OwnerControl,
        this,
        "transferOwnership",
        params,
        getContractByCodeHash
      );
    },
    proposeNewOwner: async (
      params: OwnerControlTypes.CallMethodParams<"proposeNewOwner">
    ): Promise<OwnerControlTypes.CallMethodResult<"proposeNewOwner">> => {
      return callMethod(
        OwnerControl,
        this,
        "proposeNewOwner",
        params,
        getContractByCodeHash
      );
    },
    acceptOwnership: async (
      params: OwnerControlTypes.CallMethodParams<"acceptOwnership">
    ): Promise<OwnerControlTypes.CallMethodResult<"acceptOwnership">> => {
      return callMethod(
        OwnerControl,
        this,
        "acceptOwnership",
        params,
        getContractByCodeHash
      );
    },
    renounceOwnership: async (
      params?: OwnerControlTypes.CallMethodParams<"renounceOwnership">
    ): Promise<OwnerControlTypes.CallMethodResult<"renounceOwnership">> => {
      return callMethod(
        OwnerControl,
        this,
        "renounceOwnership",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    hasRole: async (
      params: OwnerControlTypes.CallMethodParams<"hasRole">
    ): Promise<OwnerControlTypes.CallMethodResult<"hasRole">> => {
      return callMethod(
        OwnerControl,
        this,
        "hasRole",
        params,
        getContractByCodeHash
      );
    },
    getRoleAdmin: async (
      params: OwnerControlTypes.CallMethodParams<"getRoleAdmin">
    ): Promise<OwnerControlTypes.CallMethodResult<"getRoleAdmin">> => {
      return callMethod(
        OwnerControl,
        this,
        "getRoleAdmin",
        params,
        getContractByCodeHash
      );
    },
    grantRole: async (
      params: OwnerControlTypes.CallMethodParams<"grantRole">
    ): Promise<OwnerControlTypes.CallMethodResult<"grantRole">> => {
      return callMethod(
        OwnerControl,
        this,
        "grantRole",
        params,
        getContractByCodeHash
      );
    },
    revokeRole: async (
      params: OwnerControlTypes.CallMethodParams<"revokeRole">
    ): Promise<OwnerControlTypes.CallMethodResult<"revokeRole">> => {
      return callMethod(
        OwnerControl,
        this,
        "revokeRole",
        params,
        getContractByCodeHash
      );
    },
    createRole: async (
      params: OwnerControlTypes.CallMethodParams<"createRole">
    ): Promise<OwnerControlTypes.CallMethodResult<"createRole">> => {
      return callMethod(
        OwnerControl,
        this,
        "createRole",
        params,
        getContractByCodeHash
      );
    },
    onlyOwner: async (
      params?: OwnerControlTypes.CallMethodParams<"onlyOwner">
    ): Promise<OwnerControlTypes.CallMethodResult<"onlyOwner">> => {
      return callMethod(
        OwnerControl,
        this,
        "onlyOwner",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    onlyRole: async (
      params: OwnerControlTypes.CallMethodParams<"onlyRole">
    ): Promise<OwnerControlTypes.CallMethodResult<"onlyRole">> => {
      return callMethod(
        OwnerControl,
        this,
        "onlyRole",
        params,
        getContractByCodeHash
      );
    },
    queueOperation: async (
      params: OwnerControlTypes.CallMethodParams<"queueOperation">
    ): Promise<OwnerControlTypes.CallMethodResult<"queueOperation">> => {
      return callMethod(
        OwnerControl,
        this,
        "queueOperation",
        params,
        getContractByCodeHash
      );
    },
    cancelOperation: async (
      params: OwnerControlTypes.CallMethodParams<"cancelOperation">
    ): Promise<OwnerControlTypes.CallMethodResult<"cancelOperation">> => {
      return callMethod(
        OwnerControl,
        this,
        "cancelOperation",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    owner: async (
      params: OwnerControlTypes.SignExecuteMethodParams<"owner">
    ): Promise<OwnerControlTypes.SignExecuteMethodResult<"owner">> => {
      return signExecuteMethod(OwnerControl, this, "owner", params);
    },
    transferOwnership: async (
      params: OwnerControlTypes.SignExecuteMethodParams<"transferOwnership">
    ): Promise<
      OwnerControlTypes.SignExecuteMethodResult<"transferOwnership">
    > => {
      return signExecuteMethod(OwnerControl, this, "transferOwnership", params);
    },
    proposeNewOwner: async (
      params: OwnerControlTypes.SignExecuteMethodParams<"proposeNewOwner">
    ): Promise<
      OwnerControlTypes.SignExecuteMethodResult<"proposeNewOwner">
    > => {
      return signExecuteMethod(OwnerControl, this, "proposeNewOwner", params);
    },
    acceptOwnership: async (
      params: OwnerControlTypes.SignExecuteMethodParams<"acceptOwnership">
    ): Promise<
      OwnerControlTypes.SignExecuteMethodResult<"acceptOwnership">
    > => {
      return signExecuteMethod(OwnerControl, this, "acceptOwnership", params);
    },
    renounceOwnership: async (
      params: OwnerControlTypes.SignExecuteMethodParams<"renounceOwnership">
    ): Promise<
      OwnerControlTypes.SignExecuteMethodResult<"renounceOwnership">
    > => {
      return signExecuteMethod(OwnerControl, this, "renounceOwnership", params);
    },
    hasRole: async (
      params: OwnerControlTypes.SignExecuteMethodParams<"hasRole">
    ): Promise<OwnerControlTypes.SignExecuteMethodResult<"hasRole">> => {
      return signExecuteMethod(OwnerControl, this, "hasRole", params);
    },
    getRoleAdmin: async (
      params: OwnerControlTypes.SignExecuteMethodParams<"getRoleAdmin">
    ): Promise<OwnerControlTypes.SignExecuteMethodResult<"getRoleAdmin">> => {
      return signExecuteMethod(OwnerControl, this, "getRoleAdmin", params);
    },
    grantRole: async (
      params: OwnerControlTypes.SignExecuteMethodParams<"grantRole">
    ): Promise<OwnerControlTypes.SignExecuteMethodResult<"grantRole">> => {
      return signExecuteMethod(OwnerControl, this, "grantRole", params);
    },
    revokeRole: async (
      params: OwnerControlTypes.SignExecuteMethodParams<"revokeRole">
    ): Promise<OwnerControlTypes.SignExecuteMethodResult<"revokeRole">> => {
      return signExecuteMethod(OwnerControl, this, "revokeRole", params);
    },
    createRole: async (
      params: OwnerControlTypes.SignExecuteMethodParams<"createRole">
    ): Promise<OwnerControlTypes.SignExecuteMethodResult<"createRole">> => {
      return signExecuteMethod(OwnerControl, this, "createRole", params);
    },
    onlyOwner: async (
      params: OwnerControlTypes.SignExecuteMethodParams<"onlyOwner">
    ): Promise<OwnerControlTypes.SignExecuteMethodResult<"onlyOwner">> => {
      return signExecuteMethod(OwnerControl, this, "onlyOwner", params);
    },
    onlyRole: async (
      params: OwnerControlTypes.SignExecuteMethodParams<"onlyRole">
    ): Promise<OwnerControlTypes.SignExecuteMethodResult<"onlyRole">> => {
      return signExecuteMethod(OwnerControl, this, "onlyRole", params);
    },
    queueOperation: async (
      params: OwnerControlTypes.SignExecuteMethodParams<"queueOperation">
    ): Promise<OwnerControlTypes.SignExecuteMethodResult<"queueOperation">> => {
      return signExecuteMethod(OwnerControl, this, "queueOperation", params);
    },
    cancelOperation: async (
      params: OwnerControlTypes.SignExecuteMethodParams<"cancelOperation">
    ): Promise<
      OwnerControlTypes.SignExecuteMethodResult<"cancelOperation">
    > => {
      return signExecuteMethod(OwnerControl, this, "cancelOperation", params);
    },
  };

  async multicall<Calls extends OwnerControlTypes.MultiCallParams>(
    calls: Calls
  ): Promise<OwnerControlTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends OwnerControlTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<OwnerControlTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | OwnerControlTypes.MultiCallParams
      | OwnerControlTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      OwnerControl,
      this,
      callss,
      getContractByCodeHash
    );
  }
}
