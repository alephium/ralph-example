/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as StakingContractJson } from "../Staking.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace StakingTypes {
  export type Fields = {
    tokenId: HexString;
    rewardsTokenId: HexString;
    stakingAccountTemplateId: HexString;
    rewardRate: bigint;
    totalAmountStaked: bigint;
    rewardPerTokenStored: bigint;
    lastUpdateTime: bigint;
    startTime: bigint;
    duration: bigint;
    earlyUnstakePenaltyPercent: bigint;
    owner_: Address;
  };

  export type State = ContractState<Fields>;

  export type StakedEvent = ContractEvent<{ staker: Address; amount: bigint }>;
  export type UnstakedEvent = ContractEvent<{
    staker: Address;
    amount: bigint;
  }>;
  export type ClaimedRewardsEvent = ContractEvent<{
    staker: Address;
    amount: bigint;
  }>;
  export type RewardRateUpdatedEvent = ContractEvent<{ rewardRate: bigint }>;

  export interface CallMethodTable {
    stakingAccountExists: {
      params: CallContractParams<{ staker: Address }>;
      result: CallContractResult<boolean>;
    };
    getStakingAccount: {
      params: CallContractParams<{ staker: Address }>;
      result: CallContractResult<HexString>;
    };
    createStakingAccount: {
      params: CallContractParams<{
        staker: Address;
        amount: bigint;
        rewardPerTokenPaid: bigint;
      }>;
      result: CallContractResult<null>;
    };
    isPoolEnded: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<boolean>;
    };
    isPoolStarted: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<boolean>;
    };
    updateDuration: {
      params: CallContractParams<{ duration_: bigint }>;
      result: CallContractResult<null>;
    };
    updateStartTime: {
      params: CallContractParams<{ startTime_: bigint }>;
      result: CallContractResult<null>;
    };
    updateEarlyUnstakePenaltyPercent: {
      params: CallContractParams<{ earlyUnstakePenaltyPercent_: bigint }>;
      result: CallContractResult<null>;
    };
    onlyOwner: {
      params: CallContractParams<{ caller: Address }>;
      result: CallContractResult<null>;
    };
    changeOwner: {
      params: CallContractParams<{ newOwner: Address }>;
      result: CallContractResult<null>;
    };
    earned: {
      params: CallContractParams<{ account: HexString }>;
      result: CallContractResult<bigint>;
    };
    updateStakerReward: {
      params: CallContractParams<{ account: HexString }>;
      result: CallContractResult<null>;
    };
    updateReward: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    calculateRewardPerToken: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    sendRewards: {
      params: CallContractParams<{ account: HexString }>;
      result: CallContractResult<bigint>;
    };
    getTokenId: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getRewardsTokenId: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    stake: {
      params: CallContractParams<{ amount: bigint }>;
      result: CallContractResult<null>;
    };
    unstake: {
      params: CallContractParams<{ amount: bigint }>;
      result: CallContractResult<null>;
    };
    claimRewards: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    setRewardRate: {
      params: CallContractParams<{ rate: bigint }>;
      result: CallContractResult<null>;
    };
    upgrade: {
      params: CallContractParams<{ newBytecode: HexString }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    stakingAccountExists: {
      params: SignExecuteContractMethodParams<{ staker: Address }>;
      result: SignExecuteScriptTxResult;
    };
    getStakingAccount: {
      params: SignExecuteContractMethodParams<{ staker: Address }>;
      result: SignExecuteScriptTxResult;
    };
    createStakingAccount: {
      params: SignExecuteContractMethodParams<{
        staker: Address;
        amount: bigint;
        rewardPerTokenPaid: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    isPoolEnded: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    isPoolStarted: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    updateDuration: {
      params: SignExecuteContractMethodParams<{ duration_: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    updateStartTime: {
      params: SignExecuteContractMethodParams<{ startTime_: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    updateEarlyUnstakePenaltyPercent: {
      params: SignExecuteContractMethodParams<{
        earlyUnstakePenaltyPercent_: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    onlyOwner: {
      params: SignExecuteContractMethodParams<{ caller: Address }>;
      result: SignExecuteScriptTxResult;
    };
    changeOwner: {
      params: SignExecuteContractMethodParams<{ newOwner: Address }>;
      result: SignExecuteScriptTxResult;
    };
    earned: {
      params: SignExecuteContractMethodParams<{ account: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    updateStakerReward: {
      params: SignExecuteContractMethodParams<{ account: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    updateReward: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    calculateRewardPerToken: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    sendRewards: {
      params: SignExecuteContractMethodParams<{ account: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    getTokenId: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getRewardsTokenId: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    stake: {
      params: SignExecuteContractMethodParams<{ amount: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    unstake: {
      params: SignExecuteContractMethodParams<{ amount: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    claimRewards: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    setRewardRate: {
      params: SignExecuteContractMethodParams<{ rate: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    upgrade: {
      params: SignExecuteContractMethodParams<{ newBytecode: HexString }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<StakingInstance, StakingTypes.Fields> {
  encodeFields(fields: StakingTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  eventIndex = {
    Staked: 0,
    Unstaked: 1,
    ClaimedRewards: 2,
    RewardRateUpdated: 3,
  };
  consts = {
    StakingAccountErrorFactoryCodes: { AlreadyExists: BigInt("30") },
    TimeBondErrors: { PoolStarted: BigInt("10"), InvalidParams: BigInt("11") },
    PermissionsErrorCodes: { Forbidden: BigInt("40") },
    ErrorCodes: { PoolNotStarted: BigInt("0") },
  };

  at(address: string): StakingInstance {
    return new StakingInstance(address);
  }

  tests = {
    stakingAccountExists: async (
      params: TestContractParamsWithoutMaps<
        StakingTypes.Fields,
        { staker: Address }
      >
    ): Promise<TestContractResultWithoutMaps<boolean>> => {
      return testMethod(
        this,
        "stakingAccountExists",
        params,
        getContractByCodeHash
      );
    },
    getStakingAccount: async (
      params: TestContractParamsWithoutMaps<
        StakingTypes.Fields,
        { staker: Address }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(
        this,
        "getStakingAccount",
        params,
        getContractByCodeHash
      );
    },
    createStakingAccount: async (
      params: TestContractParamsWithoutMaps<
        StakingTypes.Fields,
        { staker: Address; amount: bigint; rewardPerTokenPaid: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "createStakingAccount",
        params,
        getContractByCodeHash
      );
    },
    isPoolEnded: async (
      params: Omit<
        TestContractParamsWithoutMaps<StakingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<boolean>> => {
      return testMethod(this, "isPoolEnded", params, getContractByCodeHash);
    },
    isPoolStarted: async (
      params: Omit<
        TestContractParamsWithoutMaps<StakingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<boolean>> => {
      return testMethod(this, "isPoolStarted", params, getContractByCodeHash);
    },
    updateDuration: async (
      params: TestContractParamsWithoutMaps<
        StakingTypes.Fields,
        { duration_: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "updateDuration", params, getContractByCodeHash);
    },
    updateStartTime: async (
      params: TestContractParamsWithoutMaps<
        StakingTypes.Fields,
        { startTime_: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "updateStartTime", params, getContractByCodeHash);
    },
    updateEarlyUnstakePenaltyPercent: async (
      params: TestContractParamsWithoutMaps<
        StakingTypes.Fields,
        { earlyUnstakePenaltyPercent_: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "updateEarlyUnstakePenaltyPercent",
        params,
        getContractByCodeHash
      );
    },
    onlyOwner: async (
      params: TestContractParamsWithoutMaps<
        StakingTypes.Fields,
        { caller: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "onlyOwner", params, getContractByCodeHash);
    },
    changeOwner: async (
      params: TestContractParamsWithoutMaps<
        StakingTypes.Fields,
        { newOwner: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "changeOwner", params, getContractByCodeHash);
    },
    earned: async (
      params: TestContractParamsWithoutMaps<
        StakingTypes.Fields,
        { account: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "earned", params, getContractByCodeHash);
    },
    updateStakerReward: async (
      params: TestContractParamsWithoutMaps<
        StakingTypes.Fields,
        { account: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "updateStakerReward",
        params,
        getContractByCodeHash
      );
    },
    updateReward: async (
      params: Omit<
        TestContractParamsWithoutMaps<StakingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "updateReward", params, getContractByCodeHash);
    },
    calculateRewardPerToken: async (
      params: Omit<
        TestContractParamsWithoutMaps<StakingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "calculateRewardPerToken",
        params,
        getContractByCodeHash
      );
    },
    sendRewards: async (
      params: TestContractParamsWithoutMaps<
        StakingTypes.Fields,
        { account: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "sendRewards", params, getContractByCodeHash);
    },
    getTokenId: async (
      params: Omit<
        TestContractParamsWithoutMaps<StakingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getTokenId", params, getContractByCodeHash);
    },
    getRewardsTokenId: async (
      params: Omit<
        TestContractParamsWithoutMaps<StakingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(
        this,
        "getRewardsTokenId",
        params,
        getContractByCodeHash
      );
    },
    stake: async (
      params: TestContractParamsWithoutMaps<
        StakingTypes.Fields,
        { amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "stake", params, getContractByCodeHash);
    },
    unstake: async (
      params: TestContractParamsWithoutMaps<
        StakingTypes.Fields,
        { amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "unstake", params, getContractByCodeHash);
    },
    claimRewards: async (
      params: Omit<
        TestContractParamsWithoutMaps<StakingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "claimRewards", params, getContractByCodeHash);
    },
    setRewardRate: async (
      params: TestContractParamsWithoutMaps<
        StakingTypes.Fields,
        { rate: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "setRewardRate", params, getContractByCodeHash);
    },
    upgrade: async (
      params: TestContractParamsWithoutMaps<
        StakingTypes.Fields,
        { newBytecode: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "upgrade", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: StakingTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const Staking = new Factory(
  Contract.fromJson(
    StakingContractJson,
    "",
    "5a7f28d9d1802c0bdcc4cbc89db92c28e7b61f555c2e12caac4624cf2ac0dcac",
    []
  )
);

// Use this class to interact with the blockchain
export class StakingInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<StakingTypes.State> {
    return fetchContractState(Staking, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeStakedEvent(
    options: EventSubscribeOptions<StakingTypes.StakedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Staking.contract,
      this,
      options,
      "Staked",
      fromCount
    );
  }

  subscribeUnstakedEvent(
    options: EventSubscribeOptions<StakingTypes.UnstakedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Staking.contract,
      this,
      options,
      "Unstaked",
      fromCount
    );
  }

  subscribeClaimedRewardsEvent(
    options: EventSubscribeOptions<StakingTypes.ClaimedRewardsEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Staking.contract,
      this,
      options,
      "ClaimedRewards",
      fromCount
    );
  }

  subscribeRewardRateUpdatedEvent(
    options: EventSubscribeOptions<StakingTypes.RewardRateUpdatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Staking.contract,
      this,
      options,
      "RewardRateUpdated",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | StakingTypes.StakedEvent
      | StakingTypes.UnstakedEvent
      | StakingTypes.ClaimedRewardsEvent
      | StakingTypes.RewardRateUpdatedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(Staking.contract, this, options, fromCount);
  }

  view = {
    stakingAccountExists: async (
      params: StakingTypes.CallMethodParams<"stakingAccountExists">
    ): Promise<StakingTypes.CallMethodResult<"stakingAccountExists">> => {
      return callMethod(
        Staking,
        this,
        "stakingAccountExists",
        params,
        getContractByCodeHash
      );
    },
    getStakingAccount: async (
      params: StakingTypes.CallMethodParams<"getStakingAccount">
    ): Promise<StakingTypes.CallMethodResult<"getStakingAccount">> => {
      return callMethod(
        Staking,
        this,
        "getStakingAccount",
        params,
        getContractByCodeHash
      );
    },
    createStakingAccount: async (
      params: StakingTypes.CallMethodParams<"createStakingAccount">
    ): Promise<StakingTypes.CallMethodResult<"createStakingAccount">> => {
      return callMethod(
        Staking,
        this,
        "createStakingAccount",
        params,
        getContractByCodeHash
      );
    },
    isPoolEnded: async (
      params?: StakingTypes.CallMethodParams<"isPoolEnded">
    ): Promise<StakingTypes.CallMethodResult<"isPoolEnded">> => {
      return callMethod(
        Staking,
        this,
        "isPoolEnded",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    isPoolStarted: async (
      params?: StakingTypes.CallMethodParams<"isPoolStarted">
    ): Promise<StakingTypes.CallMethodResult<"isPoolStarted">> => {
      return callMethod(
        Staking,
        this,
        "isPoolStarted",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    updateDuration: async (
      params: StakingTypes.CallMethodParams<"updateDuration">
    ): Promise<StakingTypes.CallMethodResult<"updateDuration">> => {
      return callMethod(
        Staking,
        this,
        "updateDuration",
        params,
        getContractByCodeHash
      );
    },
    updateStartTime: async (
      params: StakingTypes.CallMethodParams<"updateStartTime">
    ): Promise<StakingTypes.CallMethodResult<"updateStartTime">> => {
      return callMethod(
        Staking,
        this,
        "updateStartTime",
        params,
        getContractByCodeHash
      );
    },
    updateEarlyUnstakePenaltyPercent: async (
      params: StakingTypes.CallMethodParams<"updateEarlyUnstakePenaltyPercent">
    ): Promise<
      StakingTypes.CallMethodResult<"updateEarlyUnstakePenaltyPercent">
    > => {
      return callMethod(
        Staking,
        this,
        "updateEarlyUnstakePenaltyPercent",
        params,
        getContractByCodeHash
      );
    },
    onlyOwner: async (
      params: StakingTypes.CallMethodParams<"onlyOwner">
    ): Promise<StakingTypes.CallMethodResult<"onlyOwner">> => {
      return callMethod(
        Staking,
        this,
        "onlyOwner",
        params,
        getContractByCodeHash
      );
    },
    changeOwner: async (
      params: StakingTypes.CallMethodParams<"changeOwner">
    ): Promise<StakingTypes.CallMethodResult<"changeOwner">> => {
      return callMethod(
        Staking,
        this,
        "changeOwner",
        params,
        getContractByCodeHash
      );
    },
    earned: async (
      params: StakingTypes.CallMethodParams<"earned">
    ): Promise<StakingTypes.CallMethodResult<"earned">> => {
      return callMethod(Staking, this, "earned", params, getContractByCodeHash);
    },
    updateStakerReward: async (
      params: StakingTypes.CallMethodParams<"updateStakerReward">
    ): Promise<StakingTypes.CallMethodResult<"updateStakerReward">> => {
      return callMethod(
        Staking,
        this,
        "updateStakerReward",
        params,
        getContractByCodeHash
      );
    },
    updateReward: async (
      params?: StakingTypes.CallMethodParams<"updateReward">
    ): Promise<StakingTypes.CallMethodResult<"updateReward">> => {
      return callMethod(
        Staking,
        this,
        "updateReward",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    calculateRewardPerToken: async (
      params?: StakingTypes.CallMethodParams<"calculateRewardPerToken">
    ): Promise<StakingTypes.CallMethodResult<"calculateRewardPerToken">> => {
      return callMethod(
        Staking,
        this,
        "calculateRewardPerToken",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    sendRewards: async (
      params: StakingTypes.CallMethodParams<"sendRewards">
    ): Promise<StakingTypes.CallMethodResult<"sendRewards">> => {
      return callMethod(
        Staking,
        this,
        "sendRewards",
        params,
        getContractByCodeHash
      );
    },
    getTokenId: async (
      params?: StakingTypes.CallMethodParams<"getTokenId">
    ): Promise<StakingTypes.CallMethodResult<"getTokenId">> => {
      return callMethod(
        Staking,
        this,
        "getTokenId",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getRewardsTokenId: async (
      params?: StakingTypes.CallMethodParams<"getRewardsTokenId">
    ): Promise<StakingTypes.CallMethodResult<"getRewardsTokenId">> => {
      return callMethod(
        Staking,
        this,
        "getRewardsTokenId",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    stake: async (
      params: StakingTypes.CallMethodParams<"stake">
    ): Promise<StakingTypes.CallMethodResult<"stake">> => {
      return callMethod(Staking, this, "stake", params, getContractByCodeHash);
    },
    unstake: async (
      params: StakingTypes.CallMethodParams<"unstake">
    ): Promise<StakingTypes.CallMethodResult<"unstake">> => {
      return callMethod(
        Staking,
        this,
        "unstake",
        params,
        getContractByCodeHash
      );
    },
    claimRewards: async (
      params?: StakingTypes.CallMethodParams<"claimRewards">
    ): Promise<StakingTypes.CallMethodResult<"claimRewards">> => {
      return callMethod(
        Staking,
        this,
        "claimRewards",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    setRewardRate: async (
      params: StakingTypes.CallMethodParams<"setRewardRate">
    ): Promise<StakingTypes.CallMethodResult<"setRewardRate">> => {
      return callMethod(
        Staking,
        this,
        "setRewardRate",
        params,
        getContractByCodeHash
      );
    },
    upgrade: async (
      params: StakingTypes.CallMethodParams<"upgrade">
    ): Promise<StakingTypes.CallMethodResult<"upgrade">> => {
      return callMethod(
        Staking,
        this,
        "upgrade",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    stakingAccountExists: async (
      params: StakingTypes.SignExecuteMethodParams<"stakingAccountExists">
    ): Promise<
      StakingTypes.SignExecuteMethodResult<"stakingAccountExists">
    > => {
      return signExecuteMethod(Staking, this, "stakingAccountExists", params);
    },
    getStakingAccount: async (
      params: StakingTypes.SignExecuteMethodParams<"getStakingAccount">
    ): Promise<StakingTypes.SignExecuteMethodResult<"getStakingAccount">> => {
      return signExecuteMethod(Staking, this, "getStakingAccount", params);
    },
    createStakingAccount: async (
      params: StakingTypes.SignExecuteMethodParams<"createStakingAccount">
    ): Promise<
      StakingTypes.SignExecuteMethodResult<"createStakingAccount">
    > => {
      return signExecuteMethod(Staking, this, "createStakingAccount", params);
    },
    isPoolEnded: async (
      params: StakingTypes.SignExecuteMethodParams<"isPoolEnded">
    ): Promise<StakingTypes.SignExecuteMethodResult<"isPoolEnded">> => {
      return signExecuteMethod(Staking, this, "isPoolEnded", params);
    },
    isPoolStarted: async (
      params: StakingTypes.SignExecuteMethodParams<"isPoolStarted">
    ): Promise<StakingTypes.SignExecuteMethodResult<"isPoolStarted">> => {
      return signExecuteMethod(Staking, this, "isPoolStarted", params);
    },
    updateDuration: async (
      params: StakingTypes.SignExecuteMethodParams<"updateDuration">
    ): Promise<StakingTypes.SignExecuteMethodResult<"updateDuration">> => {
      return signExecuteMethod(Staking, this, "updateDuration", params);
    },
    updateStartTime: async (
      params: StakingTypes.SignExecuteMethodParams<"updateStartTime">
    ): Promise<StakingTypes.SignExecuteMethodResult<"updateStartTime">> => {
      return signExecuteMethod(Staking, this, "updateStartTime", params);
    },
    updateEarlyUnstakePenaltyPercent: async (
      params: StakingTypes.SignExecuteMethodParams<"updateEarlyUnstakePenaltyPercent">
    ): Promise<
      StakingTypes.SignExecuteMethodResult<"updateEarlyUnstakePenaltyPercent">
    > => {
      return signExecuteMethod(
        Staking,
        this,
        "updateEarlyUnstakePenaltyPercent",
        params
      );
    },
    onlyOwner: async (
      params: StakingTypes.SignExecuteMethodParams<"onlyOwner">
    ): Promise<StakingTypes.SignExecuteMethodResult<"onlyOwner">> => {
      return signExecuteMethod(Staking, this, "onlyOwner", params);
    },
    changeOwner: async (
      params: StakingTypes.SignExecuteMethodParams<"changeOwner">
    ): Promise<StakingTypes.SignExecuteMethodResult<"changeOwner">> => {
      return signExecuteMethod(Staking, this, "changeOwner", params);
    },
    earned: async (
      params: StakingTypes.SignExecuteMethodParams<"earned">
    ): Promise<StakingTypes.SignExecuteMethodResult<"earned">> => {
      return signExecuteMethod(Staking, this, "earned", params);
    },
    updateStakerReward: async (
      params: StakingTypes.SignExecuteMethodParams<"updateStakerReward">
    ): Promise<StakingTypes.SignExecuteMethodResult<"updateStakerReward">> => {
      return signExecuteMethod(Staking, this, "updateStakerReward", params);
    },
    updateReward: async (
      params: StakingTypes.SignExecuteMethodParams<"updateReward">
    ): Promise<StakingTypes.SignExecuteMethodResult<"updateReward">> => {
      return signExecuteMethod(Staking, this, "updateReward", params);
    },
    calculateRewardPerToken: async (
      params: StakingTypes.SignExecuteMethodParams<"calculateRewardPerToken">
    ): Promise<
      StakingTypes.SignExecuteMethodResult<"calculateRewardPerToken">
    > => {
      return signExecuteMethod(
        Staking,
        this,
        "calculateRewardPerToken",
        params
      );
    },
    sendRewards: async (
      params: StakingTypes.SignExecuteMethodParams<"sendRewards">
    ): Promise<StakingTypes.SignExecuteMethodResult<"sendRewards">> => {
      return signExecuteMethod(Staking, this, "sendRewards", params);
    },
    getTokenId: async (
      params: StakingTypes.SignExecuteMethodParams<"getTokenId">
    ): Promise<StakingTypes.SignExecuteMethodResult<"getTokenId">> => {
      return signExecuteMethod(Staking, this, "getTokenId", params);
    },
    getRewardsTokenId: async (
      params: StakingTypes.SignExecuteMethodParams<"getRewardsTokenId">
    ): Promise<StakingTypes.SignExecuteMethodResult<"getRewardsTokenId">> => {
      return signExecuteMethod(Staking, this, "getRewardsTokenId", params);
    },
    stake: async (
      params: StakingTypes.SignExecuteMethodParams<"stake">
    ): Promise<StakingTypes.SignExecuteMethodResult<"stake">> => {
      return signExecuteMethod(Staking, this, "stake", params);
    },
    unstake: async (
      params: StakingTypes.SignExecuteMethodParams<"unstake">
    ): Promise<StakingTypes.SignExecuteMethodResult<"unstake">> => {
      return signExecuteMethod(Staking, this, "unstake", params);
    },
    claimRewards: async (
      params: StakingTypes.SignExecuteMethodParams<"claimRewards">
    ): Promise<StakingTypes.SignExecuteMethodResult<"claimRewards">> => {
      return signExecuteMethod(Staking, this, "claimRewards", params);
    },
    setRewardRate: async (
      params: StakingTypes.SignExecuteMethodParams<"setRewardRate">
    ): Promise<StakingTypes.SignExecuteMethodResult<"setRewardRate">> => {
      return signExecuteMethod(Staking, this, "setRewardRate", params);
    },
    upgrade: async (
      params: StakingTypes.SignExecuteMethodParams<"upgrade">
    ): Promise<StakingTypes.SignExecuteMethodResult<"upgrade">> => {
      return signExecuteMethod(Staking, this, "upgrade", params);
    },
  };

  async multicall<Calls extends StakingTypes.MultiCallParams>(
    calls: Calls
  ): Promise<StakingTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends StakingTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<StakingTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends StakingTypes.MultiCallParams | StakingTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(Staking, this, callss, getContractByCodeHash);
  }
}
