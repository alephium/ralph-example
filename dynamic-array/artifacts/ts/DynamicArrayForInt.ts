/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as DynamicArrayForIntContractJson } from "../DynamicArrayForInt.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";

// Custom types for the contract
export namespace DynamicArrayForIntTypes {
  export type State = Omit<ContractState<any>, "fields">;

  export interface CallMethodTable {
    get: {
      params: CallContractParams<{ array: HexString; index: bigint }>;
      result: CallContractResult<bigint>;
    };
    update: {
      params: CallContractParams<{
        array: HexString;
        index: bigint;
        value: bigint;
      }>;
      result: CallContractResult<HexString>;
    };
    push: {
      params: CallContractParams<{ array: HexString; value: bigint }>;
      result: CallContractResult<HexString>;
    };
    pop: {
      params: CallContractParams<{ array: HexString }>;
      result: CallContractResult<[HexString, bigint]>;
    };
    sum: {
      params: CallContractParams<{ array: HexString }>;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    get: {
      params: SignExecuteContractMethodParams<{
        array: HexString;
        index: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    update: {
      params: SignExecuteContractMethodParams<{
        array: HexString;
        index: bigint;
        value: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    push: {
      params: SignExecuteContractMethodParams<{
        array: HexString;
        value: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    pop: {
      params: SignExecuteContractMethodParams<{ array: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    sum: {
      params: SignExecuteContractMethodParams<{ array: HexString }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<DynamicArrayForIntInstance, {}> {
  encodeFields() {
    return encodeContractFields({}, this.contract.fieldsSig, []);
  }

  at(address: string): DynamicArrayForIntInstance {
    return new DynamicArrayForIntInstance(address);
  }

  tests = {
    get: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          never,
          { array: HexString; index: bigint }
        >,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "get", params, getContractByCodeHash);
    },
    update: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          never,
          { array: HexString; index: bigint; value: bigint }
        >,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "update", params, getContractByCodeHash);
    },
    push: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          never,
          { array: HexString; value: bigint }
        >,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "push", params, getContractByCodeHash);
    },
    pop: async (
      params: Omit<
        TestContractParamsWithoutMaps<never, { array: HexString }>,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<[HexString, bigint]>> => {
      return testMethod(this, "pop", params, getContractByCodeHash);
    },
    sum: async (
      params: Omit<
        TestContractParamsWithoutMaps<never, { array: HexString }>,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "sum", params, getContractByCodeHash);
    },
  };

  stateForTest(initFields: {}, asset?: Asset, address?: string) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const DynamicArrayForInt = new Factory(
  Contract.fromJson(
    DynamicArrayForIntContractJson,
    "",
    "ea33ddedad28b33a021266875424e3eb0656da6e5162ed1dbce764875ba43d01",
    []
  )
);
registerContract(DynamicArrayForInt);

// Use this class to interact with the blockchain
export class DynamicArrayForIntInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<DynamicArrayForIntTypes.State> {
    return fetchContractState(DynamicArrayForInt, this);
  }

  view = {
    get: async (
      params: DynamicArrayForIntTypes.CallMethodParams<"get">
    ): Promise<DynamicArrayForIntTypes.CallMethodResult<"get">> => {
      return callMethod(
        DynamicArrayForInt,
        this,
        "get",
        params,
        getContractByCodeHash
      );
    },
    update: async (
      params: DynamicArrayForIntTypes.CallMethodParams<"update">
    ): Promise<DynamicArrayForIntTypes.CallMethodResult<"update">> => {
      return callMethod(
        DynamicArrayForInt,
        this,
        "update",
        params,
        getContractByCodeHash
      );
    },
    push: async (
      params: DynamicArrayForIntTypes.CallMethodParams<"push">
    ): Promise<DynamicArrayForIntTypes.CallMethodResult<"push">> => {
      return callMethod(
        DynamicArrayForInt,
        this,
        "push",
        params,
        getContractByCodeHash
      );
    },
    pop: async (
      params: DynamicArrayForIntTypes.CallMethodParams<"pop">
    ): Promise<DynamicArrayForIntTypes.CallMethodResult<"pop">> => {
      return callMethod(
        DynamicArrayForInt,
        this,
        "pop",
        params,
        getContractByCodeHash
      );
    },
    sum: async (
      params: DynamicArrayForIntTypes.CallMethodParams<"sum">
    ): Promise<DynamicArrayForIntTypes.CallMethodResult<"sum">> => {
      return callMethod(
        DynamicArrayForInt,
        this,
        "sum",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    get: async (
      params: DynamicArrayForIntTypes.SignExecuteMethodParams<"get">
    ): Promise<DynamicArrayForIntTypes.SignExecuteMethodResult<"get">> => {
      return signExecuteMethod(DynamicArrayForInt, this, "get", params);
    },
    update: async (
      params: DynamicArrayForIntTypes.SignExecuteMethodParams<"update">
    ): Promise<DynamicArrayForIntTypes.SignExecuteMethodResult<"update">> => {
      return signExecuteMethod(DynamicArrayForInt, this, "update", params);
    },
    push: async (
      params: DynamicArrayForIntTypes.SignExecuteMethodParams<"push">
    ): Promise<DynamicArrayForIntTypes.SignExecuteMethodResult<"push">> => {
      return signExecuteMethod(DynamicArrayForInt, this, "push", params);
    },
    pop: async (
      params: DynamicArrayForIntTypes.SignExecuteMethodParams<"pop">
    ): Promise<DynamicArrayForIntTypes.SignExecuteMethodResult<"pop">> => {
      return signExecuteMethod(DynamicArrayForInt, this, "pop", params);
    },
    sum: async (
      params: DynamicArrayForIntTypes.SignExecuteMethodParams<"sum">
    ): Promise<DynamicArrayForIntTypes.SignExecuteMethodResult<"sum">> => {
      return signExecuteMethod(DynamicArrayForInt, this, "sum", params);
    },
  };

  async multicall<Calls extends DynamicArrayForIntTypes.MultiCallParams>(
    calls: Calls
  ): Promise<DynamicArrayForIntTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends DynamicArrayForIntTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<DynamicArrayForIntTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | DynamicArrayForIntTypes.MultiCallParams
      | DynamicArrayForIntTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      DynamicArrayForInt,
      this,
      callss,
      getContractByCodeHash
    );
  }
}
